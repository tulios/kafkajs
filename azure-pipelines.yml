trigger:
  tags:
    include:
      - 'v*'
    exclude:
      - '*.beta.*'

  branches:
    include:
      - master

pr:
  branches:
    include:
      - master

variables:
  - group: website_secrets
  - name: KAFKA_VERSION
    value: 2.4
  - name: COMPOSE_FILE
    value: docker-compose.2_4.yml

####### Linter
jobs:
  - job: lint
    displayName: Lint
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '14.x'
    - bash: ./scripts/pipeline/shouldRunTests.sh && SKIP_TESTS=true && echo "Only non-code has changed!" || test true
      displayName: should skip tests
    - bash: test $SKIP_TESTS && echo "Skipped!" || yarn install
      displayName: yarn install
    - bash: test $SKIP_TESTS && echo "Skipped!" || yarn lint
      displayName: yarn lint

  - job: typescript_types
    displayName: Typescript types
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '14.x'
    - bash: ./scripts/pipeline/shouldRunTests.sh && SKIP_TESTS=true && echo "Only non-code has changed!" || test true
      displayName: should skip tests
    - bash: test $SKIP_TESTS && echo "Skipped!" || yarn install
      displayName: yarn install
    - bash: test $SKIP_TESTS && echo "Skipped!" || yarn test:types
      displayName: yarn test:types

####### Tests
  - job: test_broker
    displayName: Broker
    dependsOn: lint
    variables:
      test_retries: 2
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '14.x'
      - bash: ./scripts/pipeline/shouldRunTests.sh && SKIP_TESTS=true && echo "Only non-code has changed!" || test true
        displayName: should skip tests
      - bash: test $SKIP_TESTS && echo "Skipped!" || yarn install
        displayName: yarn install
      - bash: test $SKIP_TESTS && echo "Skipped!" || docker-compose -f ${COMPOSE_FILE} pull
        displayName: docker-compose pull
      - bash: test $SKIP_TESTS && echo "Skipped!" || yarn test:group:broker:ci
        displayName: test
      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testRunner: JUnit
          testResultsFiles: '**/test-report.xml'

  - job: test_admin
    displayName: Admin
    dependsOn: lint
    variables:
      test_retries: 2
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '14.x'
      - bash: ./scripts/pipeline/shouldRunTests.sh && SKIP_TESTS=true && echo "Only non-code has changed!" || test true
        displayName: should skip tests
      - bash: test $SKIP_TESTS && echo "Skipped!" || yarn install
        displayName: yarn install
      - bash: test $SKIP_TESTS && echo "Skipped!" || docker-compose -f ${COMPOSE_FILE} pull
        displayName: docker-compose pull
      - bash: test $SKIP_TESTS && echo "Skipped!" || yarn test:group:admin:ci
        displayName: test
      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testRunner: JUnit
          testResultsFiles: '**/test-report.xml'

  - job: test_producer
    displayName: Producer
    dependsOn: lint
    variables:
      test_retries: 2
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '14.x'
      - bash: ./scripts/pipeline/shouldRunTests.sh && SKIP_TESTS=true && echo "Only non-code has changed!" || test true
        displayName: should skip tests
      - bash: test $SKIP_TESTS && echo "Skipped!" || yarn install
        displayName: yarn install
      - bash: test $SKIP_TESTS && echo "Skipped!" || docker-compose -f ${COMPOSE_FILE} pull
        displayName: docker-compose pull
      - bash: test $SKIP_TESTS && echo "Skipped!" || yarn test:group:producer:ci
        displayName: test
      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testRunner: JUnit
          testResultsFiles: '**/test-report.xml'

  - job: test_consumer
    displayName: Consumer
    dependsOn: lint
    variables:
      test_retries: 2
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '14.x'
      - bash: ./scripts/pipeline/shouldRunTests.sh && SKIP_TESTS=true && echo "Only non-code has changed!" || test true
        displayName: should skip tests
      - bash: test $SKIP_TESTS && echo "Skipped!" || yarn install
        displayName: yarn install
      - bash: test $SKIP_TESTS && echo "Skipped!" || docker-compose -f ${COMPOSE_FILE} pull
        displayName: docker-compose pull
      - bash: test $SKIP_TESTS && echo "Skipped!" || yarn test:group:consumer:ci
        displayName: test
        env:
          NODE_OPTIONS: --max-old-space-size=6655 # 6.5 GB (agents run on Standard_DS2_v2 - https://docs.microsoft.com/en-us/azure/virtual-machines/dv2-dsv2-series#dsv2-series)
      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testRunner: JUnit
          testResultsFiles: '**/test-report.xml'

  - job: test_others
    displayName: 'Others (protocol, cluster, network, etc)'
    dependsOn: lint
    variables:
      test_retries: 2
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '14.x'
      - bash: ./scripts/pipeline/shouldRunTests.sh && SKIP_TESTS=true && echo "Only non-code has changed!" || test true
        displayName: should skip tests
      - bash: test $SKIP_TESTS && echo "Skipped!" || yarn install
        displayName: yarn install
      - bash: test $SKIP_TESTS && echo "Skipped!" || docker-compose -f ${COMPOSE_FILE} pull
        displayName: docker-compose pull
      - bash: test $SKIP_TESTS && echo "Skipped!" || yarn test:group:others:ci
        displayName: test
      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testRunner: JUnit
          testResultsFiles: "**/test-report.xml"

  - job: test_oauthbearer
    displayName: 'OauthBearer'
    dependsOn: lint
    variables:
      - name: test_retries
        value: 2
      - name: COMPOSE_FILE
        value: docker-compose.2_4_oauthbearer.yml
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '14.x'
      - bash: ./scripts/pipeline/shouldRunTests.sh && SKIP_TESTS=true && echo "Only non-code has changed!" || test true
        displayName: should skip tests
      - bash: test $SKIP_TESTS && echo "Skipped!" || yarn install
        displayName: yarn install
      - bash: test $SKIP_TESTS && echo "Skipped!" || docker-compose -f ${COMPOSE_FILE} pull
        displayName: docker-compose pull
      - bash: test $SKIP_TESTS && echo "Skipped!" || yarn test:group:oauthbearer:ci
        displayName: test
      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testRunner: JUnit
          testResultsFiles: "**/test-report.xml"

####### Deploy
  - job: npm_release
    displayName: 'NPM release'
    condition: and(succeeded(), contains(variables['Build.SourceBranch'], 'refs/tags/'))
    dependsOn:
      - lint
      - test_broker
      - test_admin
      - test_producer
      - test_consumer
      - test_others
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '14.x'
      - task: Npm@1
        inputs:
          command: publish
          publishEndpoint: npm_registry
      - bash: TOKEN=${GH_TOKEN} TAG=$(Build.SourceBranch) ./scripts/pipeline/updateGithubRelease.js
        displayName: github release
        env:
          GH_TOKEN: $(GH_TOKEN)

  - job: version_website
    displayName: 'Version website'
    condition: and(succeeded(), contains(variables['Build.SourceBranch'], 'refs/tags/'))
    dependsOn:
      - npm_release
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '14.x'
      - bash: |
          git config user.name "Website Build Bot"
          git config user.email "<>"
        displayName: git config
      - bash: |
          cd website
          yarn install
          DOC_VERSION=$(echo "$VERSION" | sed -e "s/^refs\/tags\/v//")
          yarn run version "$DOC_VERSION"
        displayName: generate version
        env:
          VERSION: $(Build.SourceBranch)
          GH_TOKEN: $(GH_TOKEN)
      - bash: |
          git add .
          DOC_VERSION=$(echo "$VERSION" | sed -e "s/^refs\/tags\/v//")
          git commit -m "Versioned docs for $DOC_VERSION"
          git push origin HEAD:master
        displayName: commit
        env:
          VERSION: $(Build.SourceBranch)

####### Pre-release
  - job: beta_release_check
    displayName: 'Beta release check'
    condition: and(succeeded(), contains(variables['Build.SourceBranch'], 'refs/heads/master'))
    dependsOn:
      - lint
      - test_broker
      - test_admin
      - test_producer
      - test_consumer
      - test_others
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '14.x'
      - bash: yarn install
        displayName: yarn install
      - bash: ./scripts/pipeline/checkBetaEligibility.js
        name: beta_check
        displayName: Check beta eligibility

  - job: npm_beta_release
    displayName: 'NPM beta release'
    condition: |
      and(
        succeeded(),
        contains(variables['Build.SourceBranch'], 'refs/heads/master'),
        ne(dependencies.beta_release_check.outputs['beta_check.SKIP_PRE_RELEASE'], 'true')
      )
    dependsOn:
      - lint
      - test_broker
      - test_admin
      - test_producer
      - test_consumer
      - test_others
      - beta_release_check
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '14.x'
      - bash: yarn install
        displayName: yarn install
      - bash: ./scripts/pipeline/generateBetaReleaseVersion.js
        displayName: generate beta release version
      - bash: ./scripts/pipeline/updatePackageJsonForPreRelease.js
        displayName: update package.json for beta release
      - task: Npm@1
        inputs:
          command: custom
          customCommand: publish --tag beta
          customEndpoint: npm_registry
          publishEndpoint: npm_registry
      - bash: TOKEN=${GH_TOKEN} ./scripts/pipeline/commentBackOnPR.js
        displayName: 'Comment on PR'
        env:
          GH_TOKEN: $(GH_TOKEN)
      - bash: ./scripts/pipeline/triggerCanaryAppPipeline.sh
        displayName: Trigger canary app pipeline
        env:
          GH_TOKEN: $(GH_TOKEN)
      # - bash: echo "##vso[task.setvariable variable=RELEASE_TAG;isOutput=true]v$PRE_RELEASE_VERSION"
      #   displayName: Set tag name
      # - task: GithubRelease@0
      #   displayName: github beta release
      #   inputs:
      #     gitHubConnection: github
      #     repositoryName: tulios/kafkajs
      #     tagSource: manual
      #     tag: '$(RELEASE_TAG)'

####### Website
  - job: website_deploy
    displayName: 'Website'
    condition: and(succeeded(), contains(variables['Build.SourceBranch'], 'refs/heads/master'))
    dependsOn:
      - lint
      - test_broker
      - test_admin
      - test_producer
      - test_consumer
      - test_others
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '14.x'
      - bash: git config core.autocrlf true || test true
        displayName: git config core.autocrlf
      - bash: git config --global user.name "${GH_NAME}" || test true
        displayName: git config username
        env:
          GH_NAME: $(GH_NAME)
      - bash: git config --global user.email "${GH_EMAIL}" || test true
        displayName: git config email
        env:
          GH_EMAIL: $(GH_EMAIL)
      - bash: echo "machine github.com login ${GH_NAME} password ${GH_TOKEN}" > ~/.netrc || test true
        displayName: git config machine
        env:
          GH_NAME: $(GH_NAME)
          GH_TOKEN: $(GH_TOKEN)
      - bash: cd website && yarn install && GIT_USER="${GH_NAME}" yarn run publish-gh-pages || test true
        displayName: publish to gh-pages
        env:
          GH_NAME: $(GH_NAME)
